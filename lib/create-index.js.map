{"version":3,"sources":["../src/create-index.ts"],"names":["ItemGroup","constructor","items","usedItems","usedItemSet","allowAlphabet","allowNumber","allows","Array","from","values","filter","item","hyoukiYure","ryakusyou","midashi","includes","assertInstallationSudachiSynonymsDictionary","require","error","Error","_ret","createIndex","options","Promise","resolve","keyItemGroupMap","Map","SudachiSynonymsItemGroup","SynonymsDictionary","url","dictUrl","forEach","group","groupByVocabularyNumber","reduce","res","vocabularyNumber","concat","itemGroups","Object","length","map","itemGroup","oldItemGroup","get","set"],"mappings":"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","sourcesContent":["import { fetchDictionary, SudachiSynonyms } from \"sudachi-synonyms-dictionary\";\nimport { isNumberString } from \"./is-number\";\nimport { Options } from \"./textlint-rule-no-synonyms\";\n\nexport type Midashi = string;\n\n/**\n * Dictionary Design\n *\n * // Index\n * <Midashi>: ItemGroup[]\n * // Check\n * SudachiSynonyms: boolean\n * ItemGroup: boolean\n * // Collection\n * usedItemGroup.forEach\n */\nexport class ItemGroup {\n    constructor(public items: SudachiSynonyms[]) {\n\n    }\n\n    usedItems(usedItemSet: Set<SudachiSynonyms>, { allowAlphabet, allowNumber, allows }: { allowAlphabet: boolean; allowNumber: boolean; allows: string[] }): SudachiSynonyms[] {\n        // sort by used\n        return Array.from(usedItemSet.values()).filter(item => {\n            if (allowAlphabet && (item.hyoukiYure === \"アルファベット表記\" || item.ryakusyou === \"略語・略称/アルファベット\")) {\n                // アルファベット表記\n                // blog <-> ブログ\n                // 略語・略称/アルファベット\n                // OS <-> オペレーションシステム\n                return false;\n            }\n            // 数値の違いは無視する\n            if (allowNumber && isNumberString(item.midashi)) {\n                return false;\n            }\n            if (allows.includes(item.midashi)) {\n                return false;\n            }\n            return this.items.includes(item);\n        });\n    }\n}\n\n/**\n * インストールのチェック\n */\nconst assertInstallationSudachiSynonymsDictionary = () => {\n    try {\n        require(\"sudachi-synonyms-dictionary\");\n    } catch (error) {\n        throw new Error(`sudachi-synonyms-dictionaryがインストールされていません。\nルールとは別にsudachi-synonyms-dictionaryをインストールしてください。\n      \n$ npm install sudachi-synonyms-dictionary\n\n\n`);\n    }\n};\nexport type IndexType = { keyItemGroupMap: Map<Midashi, ItemGroup[]>; SudachiSynonymsItemGroup: Map<SudachiSynonyms, ItemGroup>; };\nlet _ret: IndexType | null = null;\nexport const createIndex = async (options: Options): Promise<IndexType> => {\n    if (_ret) {\n        return Promise.resolve(_ret);\n    }\n    assertInstallationSudachiSynonymsDictionary();\n    const keyItemGroupMap: Map<Midashi, ItemGroup[]> = new Map();\n    const SudachiSynonymsItemGroup: Map<SudachiSynonyms, ItemGroup> = new Map();\n    const SynonymsDictionary = await fetchDictionary({\n        url: options.dictUrl || \"undefined dictionaly url\"\n    });\n    SynonymsDictionary.forEach(group => {\n        const groupByVocabularyNumber = group.items.reduce((res, item) => {\n            res[item.vocabularyNumber!] = (res[item.vocabularyNumber!] || []).concat(item);\n            return res;\n        }, {} as { [index: string]: SudachiSynonyms[] });\n        const itemGroups = Object.values(groupByVocabularyNumber).filter(items => {\n            return items.length > 1;\n        }).map(items => {\n            return new ItemGroup(items);\n        });\n        // register key with itemGroup\n        itemGroups.forEach(itemGroup => {\n            itemGroup.items.forEach(item => {\n                const oldItemGroup = keyItemGroupMap.get(item.midashi) || [];\n                keyItemGroupMap.set(item.midashi, oldItemGroup.concat(itemGroup));\n                SudachiSynonymsItemGroup.set(item, itemGroup);\n            });\n        });\n    });\n    _ret = {\n        keyItemGroupMap,\n        SudachiSynonymsItemGroup\n    };\n    return Promise.resolve(_ret);\n};\n"],"file":"create-index.js"}